package org.firstinspires.ftc.teamcode.AUTO;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;

@Autonomous(name="Auto 1 basket 3 Net ", group="Robot")
public class Auto1Basket3Net extends LinearOpMode {
    private DcMotor LeftFront;
    private DcMotor LeftBack;
    private DcMotor RightFront;
    private DcMotor RightBack;
    private DcMotor Vertical;
    private DcMotor Horizontal;
    private IMU imu;


    private Servo VerRotate;
    private Servo VerClaw;
    private Servo HorRotate;
    private Servo HorClaw;
    static final double WHEEL_DIAMETER = 10.4;
    static final double PULSES = 537.7;
    static final double PI = 3.1415;
    static final double PULSES_PER_CM = PULSES/(WHEEL_DIAMETER*PI);
    TouchSensor touchSensor;


    @Override
    public void runOpMode() {
        touchSensor = hardwareMap.get(TouchSensor.class, "sensor_touch");

        LeftFront = hardwareMap.get(DcMotor.class, "left_front");
        LeftBack = hardwareMap.get(DcMotor.class, "left_back");
        RightFront = hardwareMap.get(DcMotor.class, "right_front");
        RightBack = hardwareMap.get(DcMotor.class, "right_back");

        Vertical = hardwareMap.get(DcMotor.class, "Vertical");
        Horizontal = hardwareMap.get(DcMotor.class, "Vertical");

        VerRotate = hardwareMap.get(Servo.class, "Vertical Rotate");
        VerRotate.setPosition(0.19);
        VerClaw = hardwareMap.get(Servo.class, "Vertical Claw");
        VerClaw.setPosition(0.32);

        HorRotate = hardwareMap.get(Servo.class, "Horizontal Rotate");
        HorRotate.setPosition(0.45);
        HorClaw = hardwareMap.get(Servo.class, "Horizontal Claw");
        HorClaw.setPosition(0.2);

        RevHubOrientationOnRobot.LogoFacingDirection logoDirection =
                RevHubOrientationOnRobot.LogoFacingDirection.RIGHT;

        RevHubOrientationOnRobot.UsbFacingDirection usbDirection =
                RevHubOrientationOnRobot.UsbFacingDirection.UP;

        RevHubOrientationOnRobot orientationOnRobot = new
                RevHubOrientationOnRobot(logoDirection, usbDirection);

        imu = hardwareMap.get(IMU.class, "imu");
        imu.initialize(new IMU.Parameters(orientationOnRobot));

        LeftFront.setDirection(DcMotor.Direction.REVERSE);
        LeftBack.setDirection(DcMotor.Direction.REVERSE);
        RightFront.setDirection(DcMotor.Direction.FORWARD);
        RightBack.setDirection(DcMotor.Direction.FORWARD);

        Vertical.setDirection(DcMotor.Direction.FORWARD);
        Horizontal.setDirection(DcMotor.Direction.FORWARD);

        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        Vertical.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Horizontal.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        Vertical.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        Horizontal.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        imu.resetYaw();

        waitForStart();

        telemetry.addData("Vertical", Vertical.getCurrentPosition());
        telemetry.update();

        telemetry.addData("Horizontal", Horizontal.getCurrentPosition());
        telemetry.update();

        driveSide(-0.2,4);
        VerSliderPosition(-4100, -0.9);//let the VerSlider go up
        driveStraight(-0.6, 23);
        //driveStraight(-0.3, 16);
        VerClaw.setPosition(0.72);//open the VerClaw
        sleep(200);
        driveStraight(0.6, 10);
        VerSliderZero(0.9);//let the VerSlider go down
        driveRotate(0.3,87);//rotate back
        driveStraight(0.6, 15);
        driveStraight(-0.4,15);
        HorRotate.setPosition(1);//rotate down
        HorClaw.setPosition(0.27);//open the HorClaw
        HorSliderPosition(1000,0.3);
        HorClaw.setPosition(0.52);//close the HorClaw
        sleep(500);
        HorRotate.setPosition(0.55);//rotate up
        sleep(500);
        VerClaw.setPosition(0.94);//close the VerClaw
        sleep(500);
        HorClaw.setPosition(0.27);//open the HorClaw
        sleep(500);
        VerRotate.setPosition(0.81);//rotate up
        sleep(500);
        driveRotate(0.3,40);
        VerSliderPosition(-4100, -0.9);//let the VerSlider go up
        driveStraight(0.6,15);
        driveStraight(0.3,8);
        VerClaw.setPosition(0.72);//open the VerClaw to release the sample in the high basket

    }
    public void driveRotate(double rotateSpeed, double angle)
    {
        imu.resetYaw();

        while (opModeIsActive() && Math.abs(getHeading()) < angle) {

            telemetry.addData("Currently at:", "%4.0f", getHeading());
            telemetry.update();

            LeftFront.setPower(rotateSpeed);
            LeftBack.setPower(rotateSpeed);
            RightFront.setPower(-rotateSpeed);
            RightBack.setPower(-rotateSpeed);
        }
        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
        sleep(300);
    }
    public void driveStraight(double driveSpeed, double distance)
    {
        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        while (opModeIsActive() && Math.abs(LeftFront.getCurrentPosition()) < PULSES_PER_CM * distance) {

            telemetry.addData("Currently at:", "%5d", LeftFront.getCurrentPosition());
            telemetry.update();

            LeftFront.setPower(driveSpeed);
            LeftBack.setPower(driveSpeed);
            RightFront.setPower(driveSpeed);
            RightBack.setPower(driveSpeed);

        }
        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
        sleep(500);
    }
    public void driveSide(double driveSpeed, double distance)
    {
        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        while (opModeIsActive() && Math.abs(LeftFront.getCurrentPosition()) < PULSES_PER_CM * distance) {

            telemetry.addData("Currently at:", "%5d", LeftFront.getCurrentPosition());
            telemetry.update();

            LeftFront.setPower(driveSpeed);
            LeftBack.setPower(-driveSpeed);
            RightFront.setPower(-driveSpeed);
            RightBack.setPower(driveSpeed);

        }
        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
        sleep(500);
    }
    public void VerSliderPosition(int position, double power){
        Vertical.setTargetPosition(position);
        Vertical.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Vertical.setPower(power);

        while (opModeIsActive() && Vertical.isBusy()) {
            telemetry.addData("Current Position", Vertical.getCurrentPosition());
            telemetry.update();
        }
    }
    public void VerSliderZero(double power){

        while (opModeIsActive() && !touchSensor.isPressed()) {
            Vertical.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            Vertical.setPower(power);  // Keep moving down
            telemetry.addData("Vertical Motor", "Moving Down");
            telemetry.update();
        }

        Vertical.setPower(0);
    }
    public void HorSliderPosition(int position, double power){
        Horizontal.setTargetPosition(position);
        Horizontal.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Horizontal.setPower(power);
    }

    public void HorSliderZero(double power){

        while (opModeIsActive() && !touchSensor.isPressed()) {
            Horizontal.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            Horizontal.setPower(power);  // Keep moving down
            telemetry.addData("Horizontal Motor", "Moving Down");
            telemetry.update();
        }
        Horizontal.setPower(0);
    }

    public double getHeading()
    {
        YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
        return orientation.getYaw(AngleUnit.DEGREES);
    }
}
