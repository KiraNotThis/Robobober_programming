package org.firstinspires.ftc.teamcode.TELEOP;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name="TeleOp Main", group="Robot")
public class TeleOpMain extends LinearOpMode {
    private DcMotor LeftFront = null;
    private DcMotor LeftBack = null;
    private DcMotor RightFront = null;
    private DcMotor RightBack = null;

    private DcMotor Horizontal = null;
    private DcMotor Vertical = null;

    private Servo VerClaw;
    private Servo VerRotate;
    private Servo HorClaw;
    private Servo HorRotate;

    boolean xBefore = false;
    boolean aBefore = false;
    boolean bBefore = false;
    boolean yBefore = false;
    boolean a1Before = false;
    boolean b1Before = false;
    boolean x1Before = false;

    @Override
    public void runOpMode() {
        LeftFront = hardwareMap.get(DcMotor.class, "left_front");
        LeftBack = hardwareMap.get(DcMotor.class, "left_back");
        RightFront = hardwareMap.get(DcMotor.class, "right_front");
        RightBack = hardwareMap.get(DcMotor.class, "right_back");

        Horizontal = hardwareMap.get(DcMotor.class, "Horizontal");
        Vertical = hardwareMap.get(DcMotor.class, "Vertical");

        VerClaw = hardwareMap.get(Servo.class, "Vertical Claw");
        VerClaw.setPosition(0.4);

        VerRotate = hardwareMap.get(Servo.class, "Vertical Rotate");
        VerRotate.setPosition(0.17);

        HorClaw = hardwareMap.get(Servo.class, "Horizontal Claw");
        HorClaw.setPosition(0.2);

        HorRotate = hardwareMap.get(Servo.class, "Horizontal Rotate");
        HorRotate.setPosition(0.55);


        LeftFront.setDirection(DcMotor.Direction.REVERSE);
        LeftBack.setDirection(DcMotor.Direction.REVERSE);
        RightFront.setDirection(DcMotor.Direction.FORWARD);
        RightBack.setDirection(DcMotor.Direction.FORWARD);

        Horizontal.setDirection(DcMotor.Direction.FORWARD);
        Vertical.setDirection(DcMotor.Direction.FORWARD);

        double forward;
        double rotate;
        double side;

        double horizontal;
        double vertical;

        waitForStart();

        while (opModeIsActive())   {

            forward = gamepad1.left_stick_y;
            rotate = gamepad1.right_stick_x;
            side = -gamepad1.left_stick_x;

            horizontal = gamepad2.left_stick_y;
            vertical = gamepad2.right_stick_y;

            LeftFront.setPower((forward + rotate + side)*0.5);
            LeftBack.setPower((forward + rotate - side)*0.5);
            RightFront.setPower((forward - rotate - side)*0.5);
            RightBack.setPower((forward - rotate + side)*0.5);

            Horizontal.setPower(horizontal *0.3);
            Vertical.setPower(vertical *0.6);


            if(gamepad1.a && !a1Before){//auto open->close->rotate->open->down
                a1Before = true;
                VerClaw.setPosition(0.1);
                VerClaw.setPosition(0.4);
                VerRotate.setPosition(0.85);
                VerClaw.setPosition(0.1);

                Vertical.setTargetPosition(0);
                Vertical.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                Vertical.setPower(-0.6);
                while (opModeIsActive() && Vertical.isBusy()) {
                    telemetry.addData("Current Position", Vertical.getCurrentPosition());
                    telemetry.update();
                }

                Vertical.setPower(0);
            }
            a1Before = gamepad1.a;

            if(gamepad1.b && !b1Before){//go to -1500
                b1Before = true;


                Vertical.setTargetPosition(-1500);
                Vertical.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                Vertical.setPower(-0.6);

                while (opModeIsActive() && Vertical.isBusy()) {
                    telemetry.addData("Current Position", Vertical.getCurrentPosition());
                    telemetry.update();
                }
            }
            b1Before = gamepad1.b;

            if(gamepad1.x && !x1Before){//go to -2400
                x1Before = true;


                Vertical.setTargetPosition(-2400);
                Vertical.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                Vertical.setPower(-0.6);

                while (opModeIsActive() && Vertical.isBusy()) {
                    telemetry.addData("Current Position", Vertical.getCurrentPosition());
                    telemetry.update();
                }
            }
            x1Before = gamepad1.x;

            if(gamepad2.y && !yBefore){
                yBefore = true;
                if(VerClaw.getPosition() == 0.1) {
                    VerClaw.setPosition(0.4);
                }
                else{
                    VerClaw.setPosition(0.1);
                }

            }
            yBefore = gamepad2.y;

            if(gamepad2.a && !aBefore){
                aBefore = true;
                if(VerRotate.getPosition() == 0.15) {
                    VerRotate.setPosition(0.85);
                }
                else{
                    VerRotate.setPosition(0.15);
                }

            }
            aBefore = gamepad2.a;

            if(gamepad2.x && !xBefore){
                xBefore = true;
                if(HorClaw.getPosition() == 0) {
                    HorClaw.setPosition(0.2);
                }
                else{
                    HorClaw.setPosition(0);
                }
            }
            xBefore = gamepad2.x;


            if(gamepad2.b && !bBefore){
                bBefore = true;
                if(HorRotate.getPosition() == 0.55) {
                    HorRotate.setPosition(0.95);
                }
                else{
                    HorRotate.setPosition(0.55);
                }

            }
            bBefore = gamepad2.b;


        }

    }
}
