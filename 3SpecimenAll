package org.firstinspires.ftc.teamcode.AUTO;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;

@Autonomous(name="3 Specimen All", group="Robot")
public class 3SpecimenAll extends LinearOpMode {
    private DcMotor LeftFront = null;
    private DcMotor LeftBack = null;
    private DcMotor RightFront = null;
    private DcMotor RightBack = null;
    private DcMotor Vertical = null;
    private DcMotor Horizontal = null;
    private IMU imu = null;


    private Servo VerRotate;
    private Servo VerClaw;
    private Servo HorRotate;
    private Servo HorClaw;
    static final double WHEEL_DIAMETER = 10.4;
    static final double PULSES = 537.7;
    static final double PI = 3.1415;
    static final double PULSES_PER_CM = PULSES/(WHEEL_DIAMETER*PI);
    TouchSensor touchVertical;
    TouchSensor touchHorizontal;




    @Override
    public void runOpMode() {
        touchVertical = hardwareMap.get(TouchSensor.class, "sensor_touch");//in configuration change the name
        touchHorizontal = hardwareMap.get(TouchSensor.class, "sensor_touch_hor");

        LeftFront = hardwareMap.get(DcMotor.class, "left_front");
        LeftBack = hardwareMap.get(DcMotor.class, "left_back");
        RightFront = hardwareMap.get(DcMotor.class, "right_front");
        RightBack = hardwareMap.get(DcMotor.class, "right_back");

        Vertical = hardwareMap.get(DcMotor.class, "Vertical");
        Horizontal = hardwareMap.get(DcMotor.class, "Horizontal");

        VerRotate = hardwareMap.get(Servo.class, "Vertical Rotate");
        VerRotate.setPosition(0.19);
        VerClaw = hardwareMap.get(Servo.class, "Vertical Claw");
        VerClaw.setPosition(0.32);

        HorRotate = hardwareMap.get(Servo.class, "Horizontal Rotate");
        HorRotate.setPosition(0.4);
        HorClaw = hardwareMap.get(Servo.class, "Horizontal Claw");
        HorClaw.setPosition(0.23);
        RevHubOrientationOnRobot.LogoFacingDirection logoDirection =
                RevHubOrientationOnRobot.LogoFacingDirection.RIGHT;

        RevHubOrientationOnRobot.UsbFacingDirection usbDirection =
                RevHubOrientationOnRobot.UsbFacingDirection.UP;

        RevHubOrientationOnRobot orientationOnRobot = new
                RevHubOrientationOnRobot(logoDirection, usbDirection);

        imu = hardwareMap.get(IMU.class, "imu");
        imu.initialize(new IMU.Parameters(orientationOnRobot));

        LeftFront.setDirection(DcMotor.Direction.FORWARD);
        LeftBack.setDirection(DcMotor.Direction.FORWARD);
        RightFront.setDirection(DcMotor.Direction.REVERSE);
        RightBack.setDirection(DcMotor.Direction.REVERSE);

        Vertical.setDirection(DcMotor.Direction.FORWARD);
        Horizontal.setDirection(DcMotor.Direction.FORWARD);

        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        Vertical.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Horizontal.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        Vertical.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        Horizontal.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        imu.resetYaw();

        while (opModeInInit()) {

            telemetry.addData("Currently at:", "%4.0f", getHeading());
            telemetry.update();

        }

        waitForStart();

        //GO TO THE CHAMBER 1
        Thread sliderMiddle1 = new Thread(() -> verticalUp(-1500, -0.9));
        Thread driveFirst = new Thread(() -> driveStraight(1, 76.8);

        sliderMiddle1.start();
        driveFirst.start();

        try {
            sliderMiddle1.join();
            driveFirst.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //PLACE 1st SPECIMEN
        verticalUp(-2600, -0.9);//place specimen 1
        VerClaw.setPosition(0.1);//to open

        //GO FOR THE SAMPLE
        Thread sliderZero1 = new Thread(() -> verticalZero(0.9);
        Thread driveSecond = new Thread(() -> {
            driveStraight(-1, 6);//Drive back
            driveSide(1, 128.4);//Drive sideways for the sample
        });

        sliderZero1.start();
        driveSecond.start();

        try {
            sliderZero1.join();
            driveSecond.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //TAKE SAMPLE AND PUT IN OBSERVATION
        HorRotate.setPosition(1);//rotate to the sample
        sleep(500);
        HorClaw.setPosition(0);//open horizontal claw
        horizontalForward(-0.9, -500);//put slider to the sample
        HorClaw.setPosition(0.23);//close claw
        sleep(500);
        HorRotate.setPosition(0.55);//rotate to vertical claw
        horizontalZero(-0.9);//put slider in zero position
        VerClaw.setPosition(0.32);// close VerClaw
        sleep(500);
        HorClaw.setPosition(0);//open horizontal claw
        sleep(500);
        VerRotate.setPosition(0.81);//rotate to observation
        sleep(500);
        VerClaw(0.1);//open claw

        //GO TO OBSERVATION
        driveSide(-1, 30);//Drive sideways
        driveStraight(-1, 70.8);//Drive backwards

        //TAKE SPECIMEN FROM OBSERVATION 1st
        VerClaw.setPosition(0.32);// close VerClaw
        sleep(500);
        VerRotate.setPosition(0.19);//rotate to chamber

        //GO TO THE CHAMBER 2
        Thread sliderMiddle2 = new Thread(() -> verticalUp(-0.9, -1500);
        Thread driveThird = new Thread(() -> {
            driveDiagonal(1, 96.7);//Drive diagonal to the chamber
            driveStraight(1, 13.2);//Drive straight
        });

        sliderMiddle2.start();
        driveThird.start();

        try {
            sliderMiddle2.join();
            driveThird.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //PLACE 2nd SPECIMEN
        verticalUp(-2600, -0.9);//place specimen 1
        VerClaw.setPosition(0.1);//to open
        sleep(500);
        VerClaw.setPosition(0.32);//to close
        sleep(500);
        VerRotate.setPosition(0.81);//rotate for observation
        sleep(500);
        VerClaw.setPosition(0.1);//to open

        //GO TO OBSERVATION 2nd
        Thread sliderZero2 = new Thread(() -> verticalZero(0.9);
        Thread driveFourth = new Thread(() -> {
            driveDiagonal(-1, 98.9);//Drive diagonal to the observation
            driveStraight(-1, 11.6);//Drive backwards
        });

        sliderZero2.start();
        driveFourth.start();

        try {
            sliderZero2.join();
            driveFourth.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //TAKE SPECIMEN FROM OBSERVATION 2nd
        VerClaw.setPosition(0.32);// close VerClaw
        sleep(500);
        VerRotate.setPosition(0.19);//rotate to chamber

        //GO TO THE CHAMBER 3
        Thread sliderMiddle3 = new Thread(() -> verticalUp(-0.9, -1500);
        Thread driveFifth = new Thread(() -> {
            driveDiagonal(1, 98.9);//Drive diagonal to the chamber
            driveStraight(1, 11.6);//Drive straight
        });

        sliderMiddle3.start();
        driveFifth.start();

        try {
            sliderMiddle3.join();
            driveFifth.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //PLACE 3rd SPECIMEN
        verticalUp(-2600, -0.9);//place specimen 1
        VerClaw.setPosition(0.1);//to open

        //GO PARKING
        driveDiagonal(-1, 106);//Drive diagonal to the observation
        driveSide(-1, 20);//Drive sideways




    }
    public void driveRotate(double rotateSpeed, double angle)
    {
        imu.resetYaw();

        while (opModeIsActive() && Math.abs(getHeading()) < angle) {

            telemetry.addData("Currently at:", "%4.0f", getHeading());
            telemetry.update();

            LeftFront.setPower(-rotateSpeed);
            LeftBack.setPower(-rotateSpeed);
            RightFront.setPower(rotateSpeed);
            RightBack.setPower(rotateSpeed);
        }
        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
        sleep(300);
    }

    //______________________________*Straight_________________________________//

    public void driveStraight(double driveSpeed, double distance) {
        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int targetTicks = (int) (PULSES_PER_CM * distance);

        // Starting to slow down 70% of the way
        double slowdownStart = targetTicks * 0.7;

        while (opModeIsActive() && Math.abs(LeftFront.getCurrentPosition()) < targetTicks) {
            int currentTicks = Math.abs(LeftFront.getCurrentPosition());
            double slowdownFactor = 1.0;

            // Smooth braking if the robot travels 70% of the distance
            if (currentTicks > slowdownStart) {
                slowdownFactor = Math.max(0.2, 1.0 - ((currentTicks - slowdownStart) / (targetTicks - slowdownStart)));
            }

            double adjustedSpeed = driveSpeed * slowdownFactor;

            telemetry.addData("Position", "%5d / %5d", currentTicks, targetTicks);
            telemetry.addData("Speed Factor", "%.2f", slowdownFactor);
            telemetry.update();

            LeftFront.setPower(adjustedSpeed);
            LeftBack.setPower(adjustedSpeed);
            RightFront.setPower(adjustedSpeed);
            RightBack.setPower(adjustedSpeed);
        }

        LeftFront.setPower(0.05);
        LeftBack.setPower(0.05);
        RightFront.setPower(0.05);
        RightBack.setPower(0.05);

        sleep(200);

        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
    }
    //______________________________Straight*_________________________________//


    //______________________________*Side_____________________________________//

    public void driveSide(double driveSpeed, double distance) {
        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int targetTicks = (int) (PULSES_PER_CM * distance);

        double slowdownStart = targetTicks * 0.7;

        while (opModeIsActive() && Math.abs(LeftFront.getCurrentPosition()) < targetTicks) {
            int currentTicks = Math.abs(LeftFront.getCurrentPosition());
            double slowdownFactor = 1.0;

            if (currentTicks > slowdownStart) {
                slowdownFactor = Math.max(0.2, 1.0 - ((currentTicks - slowdownStart) / (targetTicks - slowdownStart)));
            }

            double adjustedSpeed = driveSpeed * slowdownFactor;

            telemetry.addData("Position", "%5d / %5d", currentTicks, targetTicks);
            telemetry.addData("Speed Factor", "%.2f", slowdownFactor);
            telemetry.update();

            LeftFront.setPower(adjustedSpeed);
            LeftBack.setPower(-adjustedSpeed);
            RightFront.setPower(-adjustedSpeed);
            RightBack.setPower(adjustedSpeed);
        }

        LeftFront.setPower(0.05);
        LeftBack.setPower(-0.05);
        RightFront.setPower(-0.05);
        RightBack.setPower(0.05);

        sleep(200);

        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
    }
    //______________________________Side*_____________________________________//


    //___________________________*Diagonal____________________________________//

    public void driveDiagonal(double driveSpeed, double distance) {
        LeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        RightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        LeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LeftBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightBack.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int targetTicks = (int) (PULSES_PER_CM * distance);

        double slowdownStart = targetTicks * 0.7;

        while (opModeIsActive() && Math.abs(RightFront.getCurrentPosition()) < targetTicks) {
            int currentTicks = Math.abs(RightFront.getCurrentPosition());
            double slowdownFactor = 1.0;

            if (currentTicks > slowdownStart) {
                slowdownFactor = Math.max(0.2, 1.0 - ((currentTicks - slowdownStart) / (targetTicks - slowdownStart)));
            }

            double adjustedSpeed = driveSpeed * slowdownFactor;

            telemetry.addData("Position", "%5d / %5d", currentTicks, targetTicks);
            telemetry.addData("Speed Factor", "%.2f", slowdownFactor);
            telemetry.update();

            LeftFront.setPower(0);
            LeftBack.setPower(-adjustedSpeed);
            RightFront.setPower(-adjustedSpeed);
            RightBack.setPower(0);
        }

        LeftBack.setPower(-0.05);
        RightFront.setPower(-0.05);

        sleep(200);

        LeftFront.setPower(0);
        LeftBack.setPower(0);
        RightFront.setPower(0);
        RightBack.setPower(0);
    }
    //___________________________Diagonal*____________________________________//

    //___________________________VerticalPosition*____________________________//
    public void verticalUp(double position, double power){
        Vertical.setTargetPosition((int) position);
        Vertical.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Vertical.setPower(power);
    }
    //___________________________VerticalPosition*____________________________//

    //___________________________VerticalZero*________________________________//
    public void verticalZero(double power){

        while (opModeIsActive() && !touchVertical.isPressed()) {
            Vertical.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            Vertical.setPower(power);  // Keep moving down
        }

        // Stop the vertical motor once the sensor is pressed
        Vertical.setPower(0);
    }
    //___________________________VerticalZero*_______________________________//

    //___________________________HorizontalPosition*____________________________//
    public void horizontalForward(double position, double power){
        Horizontal.setTargetPosition((int) position);
        Horizontal.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Horizontal.setPower(power);
    }
    //___________________________HorizontalPosition*____________________________//

    //___________________________HorizontalZero*____________________________//
    public void horizontalZero(double power){

        while (opModeIsActive() && !touchHorizontal.isPressed()) {
            Horizontal.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            Horizontal.setPower(power);  // Keep moving down
        }

        // Stop the vertical motor once the sensor is pressed
        Horizontal.setPower(0);
    }
    //___________________________HorizontalalZero*____________________________//

    public double getHeading()
    {
        YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
        return orientation.getYaw(AngleUnit.DEGREES);
    }
}
